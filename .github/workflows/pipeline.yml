name: Setup Cloud

on:
  push:
    branches: 
      - main

jobs:
 
  

  setup-kubernetes:

    runs-on: ubuntu-latest
    
    
    steps:
            
    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        mask-aws-account-id: 'no'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1    
 
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      id: install-kubectl

    - name: Update KubeConfig
      shell: bash
      run: |
        aws eks update-kubeconfig --name fiap-tech-challenge-infra-k8s --region=us-east-2 

    - name: Deploy API Default
      id: deploy-api-default
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |        
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/fiap-tech-challenge-api:latest        
        export DB_HOST_API=${{ secrets.DB_HOST_API }}
        export DB_PASS=${{ secrets.DB_PASS }}
        cd ./kubernetes/metrics-server
        kubectl apply -f components.yaml
        cd ../api-go
        envsubst < secrets.yaml | kubectl apply -f -
        envsubst < api-deployment.yaml | kubectl apply -f -
        kubectl apply -f api-hpa.yaml
        kubectl apply -f api-svc.yaml           
        export API_URL='http://$(kubectl get svc api-svc -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'):3000'        
        echo $API_URL >> $GITHUB_OUTPUT
        kubectl rollout restart deployment api-deployment

    - name: Deploy API Producao
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |        
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/fiap-tech-challenge-api-producao:latest        
        export DB_HOST_PRODUCAO=${{ secrets.DB_HOST_PRODUCAO }}
        export DB_PASS=${{ secrets.DB_PASS }}
        cd ./kubernetes/api-producao
        envsubst < secrets.yaml | kubectl apply -f -
        envsubst < deployment.yaml | kubectl apply -f -
        kubectl apply -f hpa.yaml
        kubectl apply -f svc.yaml
        kubectl rollout restart deployment api-producao-deployment

    - name: Deploy API Pedidos
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |        
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/fiap-tech-challenge-api-pedidos:latest        
        export MONGODB_URI=${{ secrets.MONGODB_URI }}  
        export API_URL=${{ steps.deploy-api-default.outputs.API_URL }}
        echo ":::::----2"
        echo $API_URL
        export API_URL=$(echo -n $API_URL | base64)
        echo ":::::----3"
        echo $API_URL
        cd ./kubernetes/api-pedidos
        envsubst < secrets.yaml | kubectl apply -f -
        echo ":::::----4"
        echo $API_URL
        envsubst < deployment.yaml | kubectl apply -f -
        kubectl apply -f hpa.yaml
        kubectl apply -f svc.yaml
        kubectl rollout restart deployment api-pedidos-deployment

    - name: Deploy API Pagamentos
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |        
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/fiap-tech-challenge-api-pagamentos:latest        
        export DB_HOST_PAGAMENTOS=${{ secrets.DB_HOST_PAGAMENTOS }}
        export DB_PASS=${{ secrets.DB_PASS }}
        export PEDIDOS_URL=nada
        export PRODUCAO_URL=nada
        cd ./kubernetes/api-pagamentos
        envsubst < secrets.yaml | kubectl apply -f -
        envsubst < deployment.yaml | kubectl apply -f -
        kubectl apply -f hpa.yaml
        kubectl apply -f svc.yaml
        kubectl rollout restart deployment api-pagamentos-deployment
        
